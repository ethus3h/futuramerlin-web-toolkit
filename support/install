#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
#set -x

#NOTE: MAINTENANCE: Manual error printing
if [[ -z "$(ember-getconf emberSharedVersion)" ]]; then
    printf '%b' '\033[1;31m' >&2
    echo "ERROR: ember-shared is not properly installed! It must be installed before installing eite." >&2
    printf '%b' '\033[0m' >&2
    exit 1
fi

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd)."' ERR

packageName="$1"
shift

skipConfigFile="false"
if [[ "$1" == "--skip-config-file" ]]; then
    skipConfigFile="true"
    shift
fi

overrideInstalledAppDataDir="/usr/share"
overrideInstalledAppDataDirArg="${1#*=}"
if [[ "$1" == "--override-data-dir="* ]] && [[ -n "$overrideInstalledAppDataDirArg" ]]; then
    overrideInstalledAppDataDir="$overrideInstalledAppDataDirArg"
fi
shift

emberPrefix="$(<support/.prefix)" || true
emberMandir="$(<support/.mandir)" || true
emberInfodir="$(<support/.infodir)" || true
emberDatadir="$(<support/.datadir)" || true
emberSysconfdir="$(<support/.sysconfdir)" || true
emberLocalstatedir="$(<support/.localstatedir)" || true

#echo 1 "$1" 2 "$2" 3 "$3" 4 "$4" 5 "$5" 6 "$6" 7 "$7" 8 "$8" 9 "$9"
if [[ -z "$emberDestdir" ]] && [[ -n "$1" ]]; then
    emberDestdir="$1"
    shift
fi
if [[ -z "$emberPrefix" ]] && [[ -n "$1" ]]; then
    emberPrefix="$1"
    shift
fi
if [[ -z "$emberCapPrefix" ]] && [[ -n "$1" ]]; then
    emberCapPrefix="$1"
    shift
fi
if [[ -z "$emberExecPrefix" ]] && [[ -n "$1" ]]; then
    emberExecPrefix="$1"
    shift
fi
if [[ -z "$emberBindir" ]] && [[ -n "$1" ]]; then
    emberBindir="$1"
    shift
fi
if [[ -z "$emberDatarootdir" ]] && [[ -n "$1" ]]; then
    emberDatarootdir="$1"
    shift
fi
if [[ -z "$emberDatadir" ]] && [[ -n "$1" ]]; then
    emberDatadir="$1"
    shift
fi
if [[ -z "$emberSysconfdir" ]] && [[ -n "$1" ]]; then
    emberSysconfdir="$1"
    shift
fi
if [[ -z "$emberSharedstatedir" ]] && [[ -n "$1" ]]; then
    emberSharedstatedir="$1"
    shift
fi
if [[ -z "$emberPrefix" ]]; then
    if [[ -z "$emberCapPrefix" ]]; then
        emberPrefix=/usr/local
    else
        emberPrefix="$emberCapPrefix"
    fi
fi
emberPrefix="$emberDestdir$emberPrefix"
#echo "emberPrefix: $emberPrefix"
if [[ -z "$emberExecPrefix" ]]; then
    emberExecPrefix="$emberPrefix"
else
    emberExecPrefix="$emberDestdir$emberExecPrefix"
fi
#echo "emberExecPrefix: $emberExecPrefix"
if [[ -z "$emberBindir" ]]; then
    emberBindir="$emberExecPrefix"/bin
fi
#echo "emberBindir: $emberBindir"
if [[ -z "$emberDatarootdir" ]]; then
    emberDatarootdir="$emberPrefix"/share
fi
#echo "emberDatarootdir: $emberDatarootdir"
if [[ -z "$emberDatadir" ]]; then
    emberDatadir="$emberDestdir$emberDatarootdir"
else
    emberDatadir="$emberDestdir$emberDatadir"
fi
#echo "emberDatadir: $emberDatadir"
if [[ -z "$emberSysconfdir" ]]; then
    emberSysconfdir="$emberPrefix"/etc
else
    emberSysconfdir="$emberPrefix$emberSysconfdir"
fi
#echo "emberSysconfdir: $emberSysconfdir"
if [[ -z "$emberSharedstatedir" ]]; then
    emberSharedstatedir="$emberPrefix"/var
else
    emberSharedstatedir="$emberPrefix$emberSharedstatedir"
fi
#echo "emberSharedstatedir: $emberSharedstatedir"

emberEmberdir="$emberPrefix"/Ember\ Library

# Done setting up variables, now install the files

mkdir -p "$emberEmberdir"
mkdir -p "$emberBindir"

if [[ -e data ]]; then
    mkdir -p "$emberDatadir/$packageName"
    cp -r data "$emberDatadir/$packageName/"
fi

if [[ -e scripts ]]; then
    mkdir -p "$emberBindir"
    chmod +x scripts/*
    cp scripts/* "$emberBindir/"
fi

if [[ -e docs ]]; then
    # NOT IMPLEMENTED ELSEWHERE
    mkdir -p "$emberDatadir/doc/$packageName"
    cp -r docs/futuramerlin-web-toolkit-output/* "$emberDatadir/doc/$packageName/"
fi

if [[ -e "support/$packageName.conf" ]]; then
    if [[ "$skipConfigFile" == "false" ]]; then
        mkdir -p "$emberSysconfdir"
        cp -v "support/$packageName.conf" "$emberSysconfdir/"
    fi
fi

#### End of Makefile install script template ####

# Any extra installation logic goes here.

export emberBindir
emberBindirEsc="$(perl -0777 -e 'print(quotemeta($ENV{emberBindir}))')"
echo "emberBindirEsc: $emberBindirEsc"
perl -0777 -p -i -e "s/\/usr\/local\/bin/$emberBindirEsc/g" scripts/futuramerlin-web-toolkit-build

export emberSysconfdir
emberSysconfdirEsc="$(perl -0777 -e 'print(quotemeta($ENV{emberSysconfdir}))')"
echo "emberSysconfdirEsc: $emberSysconfdirEsc"
perl -0777 -p -i -e "s/\/usr\/local\/etc/$emberSysconfdirEsc/g" scripts/futuramerlin-web-toolkit-build

export emberDatadir
emberDatadirEsc="$(perl -0777 -e 'print(quotemeta($ENV{emberDatadir}))')"
echo "emberDatadirEsc: $emberDatadirEsc"
perl -0777 -p -i -e "s/\/usr\/local\/share/$emberDatadirEsc/g" scripts/futuramerlin-web-toolkit-build
perl -0777 -p -i -e "s/\/usr\/local\/share/$emberDatadirEsc/g" scripts/futuramerlin-web-toolkit-build-discography

mkdir -p "$emberSharedstatedir"/futuramerlin-web-toolkit
mkdir -p "$emberDatadir/futuramerlin-web-toolkit"
cp -v support/assets/m.css "$emberPrefix"
cp -rv support/assets "$emberDatadir/futuramerlin-web-toolkit/"
