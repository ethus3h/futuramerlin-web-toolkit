<h1 class="title">industry / sapphire / industry</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/people">People</a></span>
    <span><a href="/people/elliot">Elliot Chandler</a></span>
    <span><a href="/people/elliot/music">Music</a></span>
    <span><a href="../discography.htm">Discography</a></span>
    <span><a href="../releases">Releases</a></span>
</p>

<dl>
    <dt>Artwork</dt><dd><a href="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.png"><img src="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1t.png" alt="industry / sapphire / industry: album artwork" /></a> <a href="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/2.png"><img src="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/2t.png" alt="industry / sapphire / industry: album artwork" /></a></dd>
    <dt>Date</dt><dd>30 November 2017</dd>
    <dt>Duration</dt><dd>9m54s</dd>
    <dt>Medium</dt><dd>Flac</dd>
    <dt>Context</dt><dd>Session: <a href="../sessions/2017m11d30n2.htm">2017m11d30n2: <!-- placeholder: discReadConf for the location of session 2017m11d30n2 is undefined. --></a> <small>(<!-- placeholder: discReadConf for the disambig of session 2017m11d30n2 is undefined. -->)</small> (<!-- placeholder: discReadConf for the shortDate of session 2017m11d30n2 is undefined. -->)</dd>
    <dt>Note</dt><dd>Artwork source image from <a href="https://get.pxhere.com/photo/light-glowing-ring-round-glass-isolated-stone-clear-gift-money-blue-object-black-jewelry-sparkle-jewellery-art-background-luxury-bright-gem-rich-crystal-diamond-brilliant-shape-treasure-gemstone-mineral-sapphire-solid-nobody-wealth-facet-precious-fashion-accessory-1105719.jpg">https://get.pxhere.com/photo/light-glowing-ring-round-glass-isolated-stone-clear-gift-money-blue-object-black-jewelry-sparkle-jewellery-art-background-luxury-bright-gem-rich-crystal-diamond-brilliant-shape-treasure-gemstone-mineral-sapphire-solid-nobody-wealth-facet-precious-fashion-accessory-1105719.jpg</a>, retrieved on 30 November 2017 (linked from https://pxhere.com/en/photo/1105719). Source image used under the terms of the Creative Commons CC0 license. Begun and completed 30 November 2017.</dd>
    <dt>Artist</dt><dd><a href="../artists/elliot-chandler.htm">Elliot Chandler</a></dd>
    <dt>Label</dt><dd><a href="../labels/futuramerlincom.htm">Futuramerlin.com</a></dd>
</dl>

<h2>Identifiers</h2>
<dl>
    <dt>Internet Archive</dt><dd><a href="https://archive.org/details/IndustrySapphireIndustryFuturamerlinID10457">IndustrySapphireIndustryFuturamerlinID10457</a></dd>
    <dt>Catalog number</dt><dd>10457</dd>
    <dt>MusicBrainz</dt><dd><a href="https://musicbrainz.org/release/80d66cd7-99f1-48d4-88ca-6eefc5e3b43f">80d66cd7-99f1-48d4-88ca-6eefc5e3b43f</a></dd>
    <dt>Upc</dt><dd>1827849482397</dd>
</dl>

<h2>Files</h2>
<ul>
    <li><a href="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/artsrc.tar.bz2">Artwork production files</a></li>
    <li><a href="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.Industry_Sapphire_Industry.wav">TranscodedForSoundrop</a></li>
</ul>

<h2>Track listing</h2>
<table>
    <thead><tr><th>#</th><th>ðŸ”Š</th><th>Track name</th><th>Duration</th><th>Instrumentation</th></tr></thead>
    <tbody>
        <tr><td>1</td><td><a href="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.%20industry%20_%20sapphire%20_%20industry.flac">Orig. (flac)</a> <a href="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.%20industry%20_%20sapphire%20_%20industry.mp3">MP3</a> <a href="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.%20industry%20_%20sapphire%20_%20industry.ogg">OGA</a><br /><audio controls preload="none"><source src="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.%20industry%20_%20sapphire%20_%20industry.flac" type="audio/flac"><source src="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.%20industry%20_%20sapphire%20_%20industry.ogg" type="audio/ogg"><source src="https://archive.org/download/IndustrySapphireIndustryFuturamerlinID10457/1.%20industry%20_%20sapphire%20_%20industry.mp3" type="audio/mpeg">Could not start audio player.</audio></td><td><a href="..//works/industrysapphire/industrysapphire-single.htm"></a></td><td>9m54s</td><td>vocals, ambient sound recorded on 2017 Oct. 12 and 2017 Oct. 18 in Oakes Room in Fogler Library, University of Maine (incl. vocals) (I'm not 100% certain, but am fairly sure, that the sound recorded on 2017 Oct. 18 was recorded in the Oakes Room like the first recording was)</td></tr>
    </tbody>
</table>

<script>
    /* from https://stackoverflow.com/questions/4993097/html5-display-audio-currenttime */
    function formatSecondsAsTime(secs, format) {
      var hr  = Math.floor(secs / 3600);
      var min = Math.floor((secs - (hr * 3600))/60);
      var sec = Math.floor(secs - (hr * 3600) -  (min * 60));

      if (min < 10){ 
        min = "0" + min; 
      }
      if (sec < 10){ 
        sec  = "0" + sec;
      }

      return min + ':' + sec;
    }

    let audioContainer=document.createElement('div');
    let audioTag=document.createElement('audio');
    audioTag.setAttribute("controls","controls");
    audioTag.addEventListener('ended',reachedEndOfTrack,false);
    audioContainer.className="audioContainer";
    audioContainer.appendChild(audioTag);

    let audioTitle=document.createElement('div');
    let audioDuration=document.createElement('div');
    let audioPlayhead=document.createElement('div');
    let audioCurrentTime=document.createElement('div');
    let audioWaveform=document.createElement('div');
    let audioMainPlayButton=document.createElement('button');

    audioTitle.style.padding='1rem';
    audioDuration.style.padding='1rem';
    audioPlayhead.style.padding='1rem';
    audioCurrentTime.style.padding='1rem';
    audioWaveform.style.padding='1rem';
    audioMainPlayButton.style.padding='1rem';

    audioContainer.appendChild(audioTitle);
    audioContainer.appendChild(audioDuration);
    audioContainer.appendChild(audioPlayhead);
    audioContainer.appendChild(audioCurrentTime);
    audioContainer.appendChild(audioWaveform);
    audioContainer.appendChild(audioMainPlayButton);

    document.body.appendChild(audioContainer);
    let trackRows=document.getElementsByTagName('tr');
    loadTrack(1);

    function updateCurrentTime() {
        /* based on https://stackoverflow.com/questions/4993097/html5-display-audio-currenttime */
  let currTime = Math.floor(track.currentTime).toString(); 
  let duration = Math.floor(track.duration).toString();

  audioCurrentTime.innerHTML = formatSecondsAsTime(currTime);

  if (isNaN(duration)){
    durationDiv.innerHTML = '00:00';
  } 
  else{
    durationDiv.innerHTML = formatSecondsAsTime(duration);
  }
        audioDuration.innerHTML=audioTag.currentTime;
    }
    audioTag.addEventListener("timeupdate", updateCurrentTime);

    function updateDuration() {
        audioDuration.innerHTML=audioTag.duration;
    }
    audioTag.addEventListener("durationchange", updateCurrentTime);

    function loadTrack(trackNumber) {
        let trackRows=document.getElementsByTagName('tr');
        let trackRowToPlay=trackRows[trackNumber];
        let audioTag=document.getElementsByClassName('audioContainer')[0].getElementsByTagName('audio')[0];
        let childNodesCounter=0;
        while(audioTag.childNodes.length > 0) {
            let nodes=audioTag.childNodes;
            audioTag.removeChild(nodes[0]);
            childNodesCounter=childNodesCounter+1;
        }
        let tagsToCopy=trackRowToPlay.getElementsByTagName('source');
        for (let i=0; i<tagsToCopy.length; i++) {
            audioTag.appendChild(tagsToCopy[i].cloneNode(true));
        }
    }

    function clearTrackStatuses(trackRows) {
        for(let i=1;i<trackRows.length;i++) {
            /* skip first row: it is header */
            let trackRowToClear=trackRows[i];
            trackPlayButton=trackRowToClear.getElementsByTagName('td')[1].getElementsByTagName('div')[0];
            trackPlayButton.innerHTML="Play";
            trackPlayButton.className='playButton';
        }
    }

    function playTrack(trackNumber) {
        loadTrack(trackNumber);
        let audioTag=document.getElementsByClassName('audioContainer')[0].getElementsByTagName('audio')[0];
        audioTag.play();
        let trackRows=document.getElementsByTagName('tr');
        clearTrackStatuses(trackRows);
        let trackRowToPlay=trackRows[trackNumber];
        trackPlayButton=trackRowToPlay.getElementsByTagName('td')[1].getElementsByTagName('div')[0];
        trackPlayButton.innerHTML="Pause";
        trackPlayButton.className='playButton playing';
        trackPlayButton.onclick=function(){pauseTrackFromTrackButton(this);};
    }

    function pauseTrack(trackNumber) {
        loadTrack(trackNumber);
        let audioTag=document.getElementsByClassName('audioContainer')[0].getElementsByTagName('audio')[0];
        audioTag.pause();
        let trackRows=document.getElementsByTagName('tr');
        let trackRowToPlay=trackRows[trackNumber];
        trackPlayButton=trackRowToPlay.getElementsByTagName('td')[1].getElementsByTagName('div')[0];
        trackPlayButton.innerHTML="Play";
        trackPlayButton.className='playButton';
        trackPlayButton.onclick=function(){playTrackFromTrackButton(this);};
    }

    function playTrackFromTrackButton(trackClickedElement) {
        let trackRows=document.getElementsByTagName('tr');
        for(let i=1;i<trackRows.length;i++) {
            /* skip first row: it is header */
            if (trackRows[i].getElementsByTagName('td')[1].getElementsByTagName('div')[0] === trackClickedElement) {
                playTrack(i);
            }
        }
        return false;
    }

    function pauseTrackFromTrackButton(trackClickedElement) {
        let trackRows=document.getElementsByTagName('tr');
        for(let i=1;i<trackRows.length;i++) {
            /* skip first row: it is header */
            if (trackRows[i].getElementsByTagName('td')[1].getElementsByTagName('div')[0] === trackClickedElement) {
                pauseTrack(i);
            }
        }
        return false;
    }

    function reachedEndOfTrack(eventParameter) {
        currentTrackElement=document.getElementsByClassName('playing')[0];
        let currentTrack=0;
        let trackRows=document.getElementsByTagName('tr');
        for(let i=1;i<trackRows.length;i++) {
            /* skip first row: it is header */
            if (trackRows[i].getElementsByTagName('td')[1].getElementsByTagName('div')[0] === currentTrackElement) {
                currentTrack=i;
            }
        }
        nextTrack=currentTrack+1;
        numberOfTracks=document.getElementsByTagName('tr').length-1;
        if(nextTrack>numberOfTracks) {
            nextTrack=1;
        }
        playTrack(nextTrack);
    }

    for(let i=1;i<trackRows.length;i++) {
        /* skip first row: it is header */
        trackAudioCell=trackRows[i].getElementsByTagName('td')[1];
        trackAudioCellAudioElement=trackAudioCell.getElementsByTagName('audio')[0];
        trackAudioCellAudioElement.style.display="none";
        trackAudioCellAudioElement.pause();
        trackPlayButton=document.createElement('div');
        trackPlayButton.className='playButton';
        trackPlayButton.innerHTML="Play";
        trackPlayButton.onclick=function(){playTrackFromTrackButton(this);};
        trackAudioCell.appendChild(trackPlayButton);
    }
</script>
