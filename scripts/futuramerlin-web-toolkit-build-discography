#!/bin/bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

set -x

if [[ ! -f "futuramerlin-web-toolkit-discography.conf" ]]; then
    die "Couldn't find discography configuration file!"
fi

# Where the discography assets are located
da="/usr/local/share/futuramerlin-web-toolkit/assets/discography.assets"

# Variables
breadcrumbs="$(<futuramerlin-web-toolkit-discography.breadcrumbs)"
discographyPageName="$(preadconf filename futuramerlin-web-toolkit-discography.conf)"

function getRelativeDiscographyDir() {
    # pwd 1>&2
    if [[ -f "futuramerlin-web-toolkit-discography.conf" ]]; then
        print "./"
    elif [[ -f "../futuramerlin-web-toolkit-discography.conf" ]]; then
        print "../"
    elif [[ -f "../../futuramerlin-web-toolkit-discography.conf" ]]; then
        print "../../"
    elif [[ -f "../../../futuramerlin-web-toolkit-discography.conf" ]]; then
        print "../../../"
    fi
}

function mergeConfFile() {
    local dir
    dir="$(getRelativeDiscographyDir)"
    inheritFrom="$dir"/works/"$(basename "$(pwd)")".conf
    while IFS= read -r line; do
        if ! [[ "$line" =~ ^# ]]; then
            key="$(cut -f1 -d, <<< "$line")"
            if ! grep -P "^$key," "$dir/$1"; then
                printf "%s\n" "$line" >> "$dir/$1"
            fi
        fi
    done < "$inheritFrom"
}

for file in works/*/*.conf; do
    (
        cd "$(dirname "$file")" || die
        mergeConfFile "$file"
    )
done

function listItem() {
    picture=""
    if [[ -e "$1.t.png" ]]; then
        picture="<img src=\"$1.t.png\" alt=\"$2: album artwork thumbnail\" /> "
    fi
    extension=".htm"
    if [[ "$3" == "true" ]]; then
        extension=""
    fi
    print "<li><a href=\"$1$extension\">$picture$2</a></li>"
}

function simpleMetadata() {
    print "<dt>$1</dt><dd>$2</dd>"
}

function simpleIaLink() {
    local filename="$1"
    local localident="$2"
    local label="$3"
    local iaident
    iaident="$(preadconf ia "$localident")"
    print "<a href=\"https://archive.org/download/$iaident/$filename\">$label</a>"
}

function simpleIaImage() {
    local filename="$1"
    local localident="$2"
    local iaident
    iaident="$(preadconf ia "$localident")"
    local relname
    relname="$(preadconf name "$localident")"
    print "<a href=\"https://archive.org/download/$iaident/$filename.png\"><img src=\"https://archive.org/download/$iaident/t$filename.png\" alt=\"$relname: album artwork\" /></a>"
}

function refEntry() {
    local kind="$1"
    local identifier="$2"
    local name
    name="$(preadconf name "$(getRelativeDiscographyDir)${kind}s/$identifier.conf")"
    print "<a href=\"../${kind}s/$identifier.htm\">$name</a>"
}

function keyToLabel() {
    case $1 in
    mbid)
        print "MusicBrainz"
        ;;
    alac)
        print "M4A: Apple Lossless Audio Codec"
        ;;
    cdRip)
        print "CD Rip"
        ;;
    zipRelease)
        print "ZIP release <small>(historic packing)</small>"
        ;;
    artSource)
        print "Artwork production files"
        ;;
    soundSource)
        print "Music production files"
        ;;
    releaseTracks)
        print "Original release tracks <small>(packing not original)</small>"
        ;;
    nonPngArtwork)
        print "Nonstandard artwork"
        ;;
    fileIsSemanticallySignificant)
        print "File is semantically significant"
        ;;
    fmCatNum)
        print "Catalog number"
        ;;
    oldFmCatNum)
        print "Original catalog number"
        ;;
    hypFmCatNum)
        print "Two-part old catalog number"
        ;;
    isAliasOf)
        print "Is alias of"
        ;;
    hasAlias)
        print "Has alias"
        ;;
    legalName)
        print "Legal name"
        ;;
    ia)
        print "Internet Archive"
        ;;
    *)
        print "${1^}"
        ;;
    esac
}

function simpleReference() {
    simpleMetadata "$(keyToLabel "$2")" "$(refEntry "$1" "$3")"
}

function buildTrackPlayer() {
    local workConf
    workConf="$(getRelativeDiscographyDir)/works/$1/$2.conf"
    local filename
    filename="$(preadconf filename "$workConf")"
    simpleIaLink "$filename".mp3 "$3" "MP3"
    print "/"
    simpleIaLink "$filename".flac "$3" "FLAC"
    print "/"
    simpleIaLink "$filename"."$(preadconf origExt "$workConf")" "$3" "Orig."
}

trackCounter=0
function traitToHtm() {
    case $2 in
    file)
        print "<li>$(simpleIaLink "$(cut -f2- -d, <<< "$3")" "$4" "$(keyToLabel "$(cut -f1 -d, <<< "$3")")")</li>"
        ;;
    nonPngArtwork)
        simpleMetadata "$(keyToLabel "$2")" "$(simpleIaLink "$3" "$4" "$3")"
        ;;
    fileIsSemanticallySignificant)
        if [[ "$3" == "yes" ]]; then
            simpleMetadata "$(keyToLabel "$2")" "$3"
        fi
        ;;
    artworkcount)
        local end="$3"
        for (( i=1; i<=end; i++ )); do
            simpleIaImage "$i" "$4"
            print ' '
        done
        ;;
    track)
        trackCounter=$(( trackCounter + 1 ))
        work="$(cut -f1 -d, <<< "$3")"
        subWork="$(cut -f2 -d, <<< "$3")"
        workPrefix="$(getRelativeDiscographyDir)/works/$work/$subWork"
        print "<tr><td>$trackCounter</td><td>$(buildTrackPlayer "$work" "$subWork" "$4")</td><td><a href=\"$workPrefix.htm\">$(preadconf name "$workPrefix.conf")</a></td><td>$(preadconf duration "$workPrefix.conf")</td><td>$(preadconf instrumentation "$workPrefix.conf")</td></tr>"
        ;;
    medium)
        simpleMetadata "$(keyToLabel "$2")" "$(keyToLabel "$3")"
        ;;
    label)
        simpleReference label "$2" "$3"
        ;;
    artist)
        simpleReference artist "$2" "$3"
        ;;
    shortDate)
        print ""
        ;;
    name)
        print ""
        ;;
    hasAlias)
        simpleReference artist "$2" "$3"
        ;;
    isAliasOf)
        simpleReference artist "$2" "$3"
        ;;
    "* Identifiers *")
        print "<h2>Identifiers</h2>"
        ;;
    "* Relationships *")
        print ""
        ;;
    "* Specs *")
        print ""
        ;;
    "* Files *")
        print "<h2>Files</h2><ul>"
        ;;
    "* Tracks *")
        print "</ul><h2>Track listing</h2><table><thead><tr><th>#</th><th>ðŸ”Š</th><th>Track name</th><th>Duration</th><th>Instrumentation</th></tr></thead><tbody>"
        ;;
    mbid)
        simpleMetadata "$(keyToLabel "$2")" "<a href=\"https://musicbrainz.org/${1%s}/$3\">$3</a>"
        ;;
    ia)
        simpleMetadata "$(keyToLabel "$2")" "<a href=\"https://archive.org/details/$3\">$3</a>"
        ;;
    *)
        simpleMetadata "$(keyToLabel "$2")" "$3"
        ;;
    esac
}

function buildFilteredListEntry() {
    local haystackKind="$1"
    local haystackItem="$2"
    local needleKey="$3"
    local needleValue="$4"
    local destinationFile="$5"
    local recursive="$6"
    local workVersion="$7"
    local workVersionReleases="$8"
    if [[ "$workVersionReleases" == "true" ]]; then
        if grep -P "^track,$(basename "$needleKey")" "$(getRelativeDiscographyDir)/releases/$haystackItem".conf; then
            local releaseName
            releaseName="$(preadconf name "$haystackItem.conf")"
            local disambig
            disambig="$(preadconf disambig "$haystackItem.conf")"
            if [[ -n "$disambig" ]]; then
                disambig=" <small>$disambig</small>"
            fi
            listItem "$haystackItem" "$releaseName$disambig" >> "$destinationFile"
        fi
    elif [[ "$workVersion" == "true" ]]; then
        local haystackPath
        haystackPath="$(getRelativeDiscographyDir)/works/${needleKey}/$haystackItem"
        haystackPath="${haystackPath%.conf}"
        local disambig
        disambig="$(preadconf disambig "$haystackPath".conf)"
        if [[ -n "$disambig" ]]; then
            disambig=" <small>$disambig</small>"
        fi
        listItem "$haystackPath" "$(preadconf name "$haystackPath".conf)$disambig" >> "$destinationFile"
    else
        haystackItem="${haystackItem#"$subst"}"
        haystackItem="${haystackItem%.conf}"
        local haystackConf
        haystackConf="$(getRelativeDiscographyDir)/${haystackKind}s/$haystackItem.conf"
        readconf "${needleKey}" "$haystackConf"
        foundMatch="false"
        if [[ "${#readconfValue[@]}" -gt 0 ]]; then
            for matchingCategory in "${readconfValue[@]:?}"; do
                if [[ "$matchingCategory" == "$needleValue" ]]; then
                    foundMatch="true"
                fi
            done
            if [[ "$foundMatch" == "true" ]]; then
                local name
                name="$(preadconf name "$haystackConf")"
                local disambig
                disambig="$(preadconf disambig "$haystackConf")"
                if [[ -n "$disambig" ]]; then
                    disambig=" <small>$disambig</small>"
                fi
                listItem "$(getRelativeDiscographyDir)/${haystackKind}s/$haystackItem" "$name$disambig" >> "$destinationFile"
            fi
        fi
    fi
    if [[ "$recursive" == "true" ]]; then
        local next
        if [[ "$workVersion" == "true" ]]; then
            next="$(preadconf nextEntry "$haystackPath".conf)"
        else
            next="$(preadconf nextEntry "$haystackItem".conf)"
        fi
        if [[ -n "$next" ]]; then
            buildFilteredListEntry "$haystackKind" "$next" "$needleKey" "$needleValue" "$destinationFile" "true" "$workVersion"
        fi
    fi
}

function buildFilteredList() {
    if [[ "$1" == "--workVersionReleases" ]]; then
        shift
        local workVersionReleases="true"
    elif [[ "$1" == "--workVersion" ]]; then
        shift
        local workVersion="true"
        destinationFile="../$2"
    fi
    # Searches for items of type haystackKind with the given key-value pair. If recursive is specified, it will follow the nextEntry records, starting from the given haystackItem.
    if [[ "$workVersion" == "true" || "$workVersionReleases" == "true" ]]; then
        needleKey="$1"
        subst="$(getRelativeDiscographyDir)/works/$needleKey/"
        if [[ "$workVersionReleases" == "true" ]]; then
            subst="$(getRelativeDiscographyDir)/releases/"
        fi
    else
        local haystackKind="$1"
        local needleKey="$2"
        local needleValue="$3"
        local destinationFile="$4"
        local subst
        subst="$(getRelativeDiscographyDir)/${haystackKind}s/"
    fi
    (
        cd "$subst" || die
        if [[ -e futuramerlin-web-toolkit-discography.entry-point ]]; then
            buildFilteredListEntry "$haystackKind" "$(<futuramerlin-web-toolkit-discography.entry-point)" "$needleKey" "$needleValue" "$destinationFile" "true" "$workVersion" "$workVersionReleases"
        else
            for haystackItem in *.conf; do
                buildFilteredListEntry "$haystackKind" "$haystackItem" "$needleKey" "$needleValue" "$destinationFile" "false" "$workVersion" "$workVersionReleases"
            done
        fi
    )
}

function buildSinglePage() {
    id="$1"
    fn="$id.htm"
    declare -n ref=$category; ref+=( "$id" )
    # Build individual page
    cp "$da/item-template.htm" "$fn"
    name="$(preadconf name "$id.conf")"
    ereplace "@TITLE@" "$name" "$fn"
    ereplace "@BREADCRUMBS@" "$breadcrumbs <span><a href=\"../$discographyPageName.htm\">Discography</a></span> <span><a href=\"../$category\">${category^}</a></span>" "$fn"
    print "<dl>" >> "$fn"
    trackCounter=0
    while IFS= read -r line; do
        if ! [[ "$line" =~ ^# ]]; then
            key="$(cut -f1 -d, <<< "$line")"
            if ! [[ -z "$key" ]]; then
                traitToHtm "$category" "$key" "$(cut -f2- -d, <<< "$line")" "$id.conf" >> "$fn"
            fi
        fi
    done < "$id.conf"
    print "</dl>" >> "$fn"
    if [[ "$category" == "labels" ]]; then
        # Generate index of artists on this label
        print "<h2>Artists</h2><ul>" >> "$fn"
        for artist in "$(getRelativeDiscographyDir)"/artists/*.conf; do
            buildFilteredListEntry "artist" "$artist" "label" "$id" "$fn"
        done
        print "</ul>" >> "$fn"
    fi
    if [[ "$category" == "artists" || "$category" == "labels" ]]; then
        # Generate list of releases
        print "<h2>Releases</h2><ul>" >> "$fn"
        buildFilteredList "release" "$(<"$(getRelativeDiscographyDir)"/releases/futuramerlin-web-toolkit-discography.entry-point)" "${category%s}" "$id" "$fn"
        print "</ul>" >> "$fn"
    fi
    if [[ "$category" == "works" ]]; then
        # Generate list of sub-works, and build a page for each
        print "<h2>Versions</h2><ul>" >> "$fn"
        buildFilteredList --workVersion "$id" "$fn"
        print "</ul><h2>Releases</h2><ul>" >> "$fn"
        buildFilteredList --workVersionReleases "$id" "$fn"
        print "</ul>" >> "$fn"
    fi
    if [[ "$2" == "recursive" ]]; then
        local next
        next="$(preadconf nextEntry)"
        if [[ -n "$next" ]]; then
            buildSinglePage "$next" "recursive"
        fi
    fi
}

function buildIndex() {
    category="$1"
    (
        cd "$category" || die
        declare -a -g "$category"
        shopt -s nullglob
        if [[ "$category" == releases || "$category" == works ]]; then
            buildSinglePage "$(<futuramerlin-web-toolkit-discography.entry-point)" "recursive"
        else
            for item in *.conf; do
                buildSinglePage "${item%.conf}"
            done
        fi

        # Build index page
        cp "$da/index-template.htm" index.htm
        ereplace "@TITLE@" "${category^}" index.htm
        ereplace "@BREADCRUMBS@" "$breadcrumbs <span><a href=\"../$discographyPageName.htm\">Discography</a></span>" index.htm
        local itemList=""
        local categoryarray="${category}[@]"
        for item in "${!categoryarray}"; do
            local name
            name="$(preadconf name "$item.conf")"
            itemList="$itemList$(listItem "$item" "$name")"
        done
        ereplace "@LIST@" "$itemList" index.htm
    )
}

cp "$da/index-template.htm" "$discographyPageName.htm" || die
ereplace "@TITLE@" "Discography" "$discographyPageName.htm"
ereplace "@BREADCRUMBS@" "$breadcrumbs" "$discographyPageName.htm"
itemList=""
indexItems=(artists labels releases works broadcasts press sessions files)
for item in "${indexItems[@]}"; do
    if [[ -e "$item" ]]; then
        buildIndex "$item"
        itemList="$itemList$(listItem "$item" "${item^}" true)"
    fi
done
ereplace "@LIST@" "$itemList" "$discographyPageName.htm"
