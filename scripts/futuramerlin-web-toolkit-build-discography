#!/bin/bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

set -x

if [[ ! -f "futuramerlin-web-toolkit-discography.conf" ]]; then
    die "Couldn't find discography configuration file!"
fi

# Where the discography assets are located
da="/usr/local/share/futuramerlin-web-toolkit/assets/discography.assets"

# Variables
breadcrumbs="$(<futuramerlin-web-toolkit-discography.breadcrumbs)"
discographyPageName="$(preadconf filename futuramerlin-web-toolkit-discography.conf)"

function listItem() {
    picture=""
    if [[ -e "$1.t.png" ]]; then
        picture="<img src=\"$1.t.png\" alt=\"$2: album artwork thumbnail\" /> "
    fi
    extension=".htm"
    if [[ "$3" == "true" ]]; then
        extension=""
    fi
    print "<li><a href=\"$1$extension\">$picture$2</a></li>"
}

function simpleMetadata() {
    print "<dt>$1</dt><dd>$2</dd>"
}

function keyToLabel() {
    case $1 in
    legalName)
        print "Legal name"
        ;;
    ia)
        print "Internet Archive"
        ;;
    *)
        "${1^}"
        ;;
    esac
}

function traitToHtm() {
    case $2 in
    Identifiers)
        print "<h2>Identifiers</h2>"
        ;;
    ia)
        simpleMetadata "$(keyToLabel "$2")" "<a href=\"https://archive.org/details/$3\">$3</a>"
        ;;
    *)
        simpleMetadata "$(keyToLabel "$2")" "$3"
        ;;
    esac
}

function buildIndex() {
    category="$1"
    (
        cd "$category" || die
        declare -a -g "$category"
        for item in *.conf; do
            id="${item%.conf}"
            fn="$id.htm"
            declare -n ref=$category; ref+=( "$id" )
            # Build individual page
            cp "$da/item-template.htm" "$fn"
            name="$(preadconf name "$id.conf")"
            ereplace "@TITLE@" "$name" "$fn"
            ereplace "@BREADCRUMBS@" "$breadcrumbs <span><a href=\"../$discographyPageName.htm\">Discography</a></span> <span><a href=\"../$category.htm\">${category^}</a></span>" "$fn"
            print "<dl>" >> "$fn"
            while IFS= read -r line; do
                if ! [[ "$line" =~ ^# ]]; then
                    key="$(cut -f1 -d, <<< "$line")"
                    if ! [[ -z "$key" ]]; then
                        traitToHtm "$category" "$key" "$(cut -f2 -d, <<< "$line")" >> "$fn"
                    fi
                fi
            done < "$2"
            print "</dl>" >> "$fn"
        done

        # Build index page
        cp "$da/index-template.htm" index.htm
        ereplace "@TITLE@" "${category^}" index.htm
        ereplace "@BREADCRUMBS@" "$breadcrumbs <span><a href=\"../$discographyPageName.htm\">Discography</a></span>" index.htm
        itemList=""
        categoryarray="${category}[@]"
        for item in "${!categoryarray}"; do
            name="$(preadconf name "$item.conf")"
            itemList="$itemList$(listItem "$item" "$name")"
        done
        ereplace "@LIST@" "$itemList" index.htm
    )
}

cp "$da/index-template.htm" "$discographyPageName.htm" || die
ereplace "@TITLE@" "Discography" "$discographyPageName.htm"
ereplace "@BREADCRUMBS@" "$breadcrumbs" "$discographyPageName.htm"
itemList=""
indexItems=(artists broadcasts files labels releases sessions works)
for item in "${indexItems[@]}"; do
    if [[ -e "$item" ]]; then
        buildIndex "$item"
        itemList="$itemList$(listItem "$item" "${item^}" true)"
    fi
done
ereplace "@LIST@" "$itemList" "$discographyPageName.htm"

# All the indices are now built.
