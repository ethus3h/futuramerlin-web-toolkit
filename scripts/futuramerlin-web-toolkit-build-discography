#!/bin/bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

set -x

if [[ ! -f "futuramerlin-web-toolkit-discography.conf" ]]; then
    die "Couldn't find discography configuration file!"
fi

# Where the discography assets are located
da="/usr/local/share/futuramerlin-web-toolkit/assets/discography.assets"

# Variables
breadcrumbs="$(<futuramerlin-web-toolkit-discography.breadcrumbs)"
discographyPageName="$(preadconf filename futuramerlin-web-toolkit-discography.conf)"

function listItem() {
    picture=""
    if [[ -e "$1.t.png" ]]; then
        picture="<img src=\"$1.t.png\" alt=\"$2: album artwork thumbnail\" /> "
    fi
    extension=".htm"
    if [[ "$3" == "true" ]]; then
        extension=""
    fi
    print "<li><a href=\"$1$extension\">$picture$2</a></li>"
}

function simpleMetadata() {
    print "<dt>$1</dt><dd>$2</dd>"
}

function simpleIaLink() {
    filename="$1"
    localident="$2"
    label="$3"
    iaident="$(preadconf ia "$localident")"
    print "<a href=\"https://archive.org/download/$iaident/$filename\">$label</a>"
}

function refEntry() {
    kind="$1"
    identifier="$2"
    name="$(preadconf name "../$kind/$identifier.conf")"
    print "<a href=\"../$kind/$identifier.htm\">$name</a>"
}

function keyToLabel() {
    case $1 in
    nonPngArtwork)
        print "Nonstandard artwork"
        ;;
    fileIsSemanticallySignificant)
        print "File is semantically significant"
        ;;
    fmCatNum)
        print "Catalog number"
        ;;
    oldFmCatNum)
        print "Old catalog number"
        ;;
    hypFmCatNum)
        print "Two-part old catalog number"
        ;;
    isAliasFor)
        print "Is alias for"
        ;;
    hasAlias)
        print "Has alias"
        ;;
    legalName)
        print "Legal name"
        ;;
    ia)
        print "Internet Archive"
        ;;
    *)
        print "${1^}"
        ;;
    esac
}

function simpleReference() {
    simpleMetadata "$(keyToLabel "$2")" "$(refEntry "$1" "$3")"
}

function traitToHtm() {
    case $2 in
    nonPngArtwork)
        simpleMetadata "$(keyToLabel "$2")" "$(simpleIaLink "$3" "$4" "$3")"
        ;;
    fileIsSemanticallySignificant)
        if [[ "$3" == "yes" ]]; then
            simpleMetadata "$(keyToLabel "$2")" "$3"
        fi
        ;;
    label)
        simpleReference label "$2" "$3"
        ;;
    artist)
        simpleReference artist "$2" "$3"
        ;;
    hasAlias)
        simpleReference artist "$2" "$3"
        ;;
    isAliasFor)
        simpleReference artist "$2" "$3"
        ;;
    "* Identifiers *")
        print "<h2>Identifiers</h2>"
        ;;
    "* Traits *")
        print ""
        ;;
    "* Relationships *")
        print ""
        ;;
    "* Specs *")
        print ""
        ;;
    "* Files *")
        print ""
        ;;
    "* Tracks *")
        print "<h2>Track listing</h2>"
        ;;
    ia)
        simpleMetadata "$(keyToLabel "$2")" "<a href=\"https://archive.org/details/$3\">$3</a>"
        ;;
    *)
        simpleMetadata "$(keyToLabel "$2")" "$3"
        ;;
    esac
}

function buildFilteredListEntry() {
    local matchKind="$1"
    local id="$2"
    local item="$3"
    local subst="../${matchKind}s/"
    item="${item#"$subst"}"
    item="${item%.conf}"
    readconf "label" "../${matchKind}s/$item.conf"
    foundMatch="false"
    if [[ "${#readconfValue[@]}" -gt 0 ]]; then
        for matchingCategory in "${readconfValue[@]:?}"; do
            if [[ "$matchingCategory" == "$id" ]]; then
                foundMatch="true"
            fi
        done
        if [[ "$foundMatch" == "true" ]]; then
            name="$(preadconf name "../${matchKind}s/$item.conf")"
            listItem "$item" "$name" >> "$fn"
        fi
    fi
    if [[ "$3" == "recursive" ]]; then
        next="$(preadconf nextEntry)"
        if [[ -n "$next" ]]; then
            buildFilteredListEntry "$next" "recursive"
        fi
    fi
}

function buildSinglePage() {
    id="$1"
    fn="$id.htm"
    declare -n ref=$category; ref+=( "$id" )
    # Build individual page
    cp "$da/item-template.htm" "$fn"
    name="$(preadconf name "$id.conf")"
    ereplace "@TITLE@" "$name" "$fn"
    ereplace "@BREADCRUMBS@" "$breadcrumbs <span><a href=\"../$discographyPageName.htm\">Discography</a></span> <span><a href=\"../$category\">${category^}</a></span>" "$fn"
    print "<dl>" >> "$fn"
    while IFS= read -r line; do
        if ! [[ "$line" =~ ^# ]]; then
            key="$(cut -f1 -d, <<< "$line")"
            if ! [[ -z "$key" ]]; then
                traitToHtm "$category" "$key" "$(cut -f2- -d, <<< "$line")" "$id.conf" >> "$fn"
            fi
        fi
    done < "$id.conf"
    print "</dl>" >> "$fn"
    if [[ "$category" == "labels" ]]; then
        # Generate index of artists on this label
        print "<h2>Artists</h2><ul>" >> "$fn"
        for artist in ../artists/*.conf; do
            buildFilteredListEntry "label" "$id" "$artist"
        done
        print "</ul>" >> "$fn"
    fi
    if [[ "$category" == "artists" || "$category" == "labels" ]]; then
        # Generate list of releases
        print "<h2>Releases</h2><ul>" >> "$fn"
        buildFilteredListEntry "${category%s}" "$id" "$(<../releases/futuramerlin-web-toolkit-discography.entry-point)" "recursive"
        print "</ul>" >> "$fn"
    fi
    if [[ "$2" == "recursive" ]]; then
        next="$(preadconf nextEntry)"
        if [[ -n "$next" ]]; then
            buildSinglePage "$next" "recursive"
        fi
    fi
}

function buildIndex() {
    category="$1"
    (
        cd "$category" || die
        declare -a -g "$category"
        shopt -s nullglob
        if [[ "$category" == releases || "$category" == works ]]; then
            buildSinglePage "$(<futuramerlin-web-toolkit-discography.entry-point)" "recursive"
        else
            for item in *.conf; do
                buildSinglePage "${item%.conf}"
            done
        fi

        # Build index page
        cp "$da/index-template.htm" index.htm
        ereplace "@TITLE@" "${category^}" index.htm
        ereplace "@BREADCRUMBS@" "$breadcrumbs <span><a href=\"../$discographyPageName.htm\">Discography</a></span>" index.htm
        itemList=""
        categoryarray="${category}[@]"
        for item in "${!categoryarray}"; do
            name="$(preadconf name "$item.conf")"
            itemList="$itemList$(listItem "$item" "$name")"
        done
        ereplace "@LIST@" "$itemList" index.htm
    )
}

cp "$da/index-template.htm" "$discographyPageName.htm" || die
ereplace "@TITLE@" "Discography" "$discographyPageName.htm"
ereplace "@BREADCRUMBS@" "$breadcrumbs" "$discographyPageName.htm"
itemList=""
indexItems=(artists labels releases works broadcasts press sessions files)
for item in "${indexItems[@]}"; do
    if [[ -e "$item" ]]; then
        buildIndex "$item"
        itemList="$itemList$(listItem "$item" "${item^}" true)"
    fi
done
ereplace "@LIST@" "$itemList" "$discographyPageName.htm"

# All the indices are now built.
