#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# Convert a fmwtk simple-format page (*.ftm) to the more html-like fmwtk format; other files will be returned as-is
# ftm = Futuramerlin-web-Toolkit Markup
# Usage: fmwtk-convpage [page].ftm [output-file]

infile="$1"
outfile="$2"
stdout="false"
extension="${infile//*.}"

if [[ -z "$outfile" ]]; then
    outfile="-"
fi
if [[ "-" == "$outfile" ]]; then
    outfile="$(tempFile)"
    stdout="true"
fi

cp "$infile" "$outfile"

if [[ "ftm" == "$extension" ]]; then
    perl -0777 -p -i -e '
        s/^(\s*)<(book|web)>/\1:9c43104e-3625-4bba-8ba9-0ade025bd2ff<\2>/gm; # <book> and <web> at start of a line should not suppress automatic paragraph tags, so hide them from the paragraph tag regex with this uuid
        ' "$outfile" || die "Substitution failed"
    echo >> "$outfile" # make sure there's a blank line at the end to use for detecting closing tags
    prevLineIsListItem="false"
    prevLineSpacesCount="0"
    inPreTag="false"
    { while IFS= read -r thisLine; do
        thisLineSpaces="$(perl -0777 -p -i -e 's/^(\s*)([^\s].*)$/\1/g' 2>/dev/null <<< "$thisLine")"
        thisLineWithoutSpaces="$(perl -0777 -p -i -e 's/^(\s*)([^\s].*)$/\2/g' 2>/dev/null <<< "$thisLine")"
        thisLineIsListItem="false"
        [[ "$thisLineWithoutSpaces" =~ ^-\  ]] && thisLineIsListItem="ul"
        [[ "$thisLineWithoutSpaces" =~ ^\#\  ]] && thisLineIsListItem="ol"
        [[ "$thisLine" =~ ^\ *'<'/?li'>'$ ]] && thisLineIsListItem="true" # end of a multi-line list item
        thisLineSpacesCount="$(wc -c <<< "$thisLineSpaces")"
        thisLineSpacesCount=$(( thisLineSpacesCount - 1 ))
        [[ "$thisLineWithoutSpaces" =~ ^'<'/?li'>' ]] && thisLineSpacesCount=$(( thisLineSpacesCount - 4 )) # <li> tags are indented 1 level more than - equivalent
        deferredNewlineNeeded="false"
        if [[ "$thisLine" =~ '<pre>' ]] && [[ ! "$thisLine" =~ '</pre>' ]]; then
            # ONLY Supports 1 pre tag per line
            inPreTag='true'
        elif [[ "true" == "$inPreTag" ]] && [[ "$thisLine" =~ '</pre>' ]] && [[ ! "$thisLine" =~ '<pre>' ]]; then
            inPreTag='false'
        fi
        if [[ "false" == "$inPreTag" ]]; then
            if [[ "$prevLineSpacesCount" -lt "$thisLineSpacesCount" ]] || [[ "false" == "$prevLineIsListItem" ]]; then
                # This line has more spaces, or the previous line was not a list item, so it could be a list beginning
                #echo "$thisLine" 1>&2
#                    processed="$thisLine"
                    processed="$(perl -0777 -p -i -e '
                    s/^('"$thisLineSpaces"')- ([^\n]*)\n/\1<ul>\n\1    <li>\2<\/li>/m; # ul start tags
                    s/^('"$thisLineSpaces"')# ([^\n]*)\n/\1<ol>\n\1    <li>\2<\/li>/m; # ol start tags
                    ' 2>/dev/null <<< "$thisLine")"
                echo "Input:$thisLine:Processed:$processed:TLS:$thisLineSpaces:List item:$thisLineIsListItem:" 1>&2
            elif [[ "$prevLineSpacesCount" -gt "$thisLineSpacesCount" ]] && [[ "false" != "$thisLineIsListItem" ]]; then
                # It has fewer spaces, so it could be a list end
                processed="$(perl -0777 -p -i -e '
                    s/^('"$thisLineSpaces"')- ([^\n]*)/\1    <\/ul><\/li>\n\1    <li>\2<\/li>/m; # ul end tags in list
                    s/^('"$thisLineSpaces"')# ([^\n]*)/\1    <\/ol><\/li>\n\1    <li>\2<\/li>/m; # ol end tags in list
                    ' 2>/dev/null <<< "$thisLine")"
            elif [[ "ul" == "$prevLineIsListItem" ]]; then
                # FIXME: The whitespace (indentation and newlines) is wrong for this case and corresponding ol list end case
                # The previous line was a ul list item, so it could be a list end (but is not ending within a list)
                processed="$(perl -0777 -p -i -e '
                    s/^('"$thisLineSpaces"')([^-][^ ][^\n]*\n|\n)/\1<\/ul>\n\1\2/gm; # ul end tags
                    ' 2>/dev/null <<< "$thisLine")"
                [[ "$thisLine" != "$processed" ]] && deferredNewlineNeeded="true" # to fix whitespace
            else
                # The previous line was a ol list item, so it could be a list end (but is not ending within a list)
                processed="$(perl -0777 -p -i -e '
                    s/^('"$thisLineSpaces"')([^#][^ ][^\n]*\n|\n)/\1<\/ol>\n\1\2/gm; # ol end tags
                    ' 2>/dev/null <<< "$thisLine")"
                [[ "$thisLine" != "$processed" ]] && deferredNewlineNeeded="true" # to fix whitespace
            fi
        else
            processed="$thisLine"
        fi
        if [[ "false" == "$inPreTag" ]]; then
            processed="$(perl -0777 -p -i -e '
                s/^(\s*)- ([^\n]*)\n/\1    <li>\2<\/li>\n/gm; # li tags in ul
                s/^(\s*)# ([^\n]*)\n/\1    <li>\2<\/li>\n/gm; # li tags in ol
                ' 2>/dev/null <<< "$processed")"
        fi
        if [[ "false" == "$inPreTag" ]] && [[ "false" == "$thisLineIsListItem" ]]; then
            processed="$(perl -0777 -p -i -e '
                s/^(\s*)([^<\n\s][^\n]*)\n/\1<p>\2<\/p>\n/gm; # paragraph tags
                ' 2>/dev/null <<< "$processed")"
        fi
        echo "$processed"
        [[ "true" == "$deferredNewlineNeeded" ]] && echo # to fix whitespace
        prevLineIsListItem="$thisLineIsListItem"
        prevLineSpacesCount="$thisLineSpacesCount"
    perl -0777 -p -i -e '
        s/^(\s*):9c43104e-3625-4bba-8ba9-0ade025bd2ff</\1</g; # remove book/web tag marker
        ' "$outfile" || die "Substitution failed"
    done < "$outfile"; } | sponge "$outfile"
    perl -0777 -p -i -e '
        s/^(\s*)\@t ([^\n]*)\n/\1<h1>\2<\/h1>\n/gm; # headers
        s/^(\s*)\@0 ([^\n]*)\n/\1<h2>\2<\/h2>\n/gm;
        s/^(\s*)\@1 ([^\n]*)\n/\1<h3>\2<\/h3>\n/gm;
        s/^(\s*)\@2 ([^\n]*)\n/\1<h4>\2<\/h4>\n/gm;
        s/^(\s*)\@3 ([^\n]*)\n/\1<h5>\2<\/h5>\n/gm;
        s/^(\s*)\@4 ([^\n]*)\n/\1<h6>\2<\/h6>\n/gm;
        s/\@\@/&#64;/gm; # Allow escaping @
        s/<\/li>\n(\s*)<(ul|ol)>/\n\1<\2>/gm; # Nested list start tags which should be in their associated li
        ' "$outfile" || die "Substitution failed"
fi

if [[ "true" == "$stdout" ]]; then
    cat "$outfile"
fi
