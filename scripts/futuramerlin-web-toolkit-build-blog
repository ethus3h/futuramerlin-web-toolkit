#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null
trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO}."' ERR

# set -x

sourceDir="$(readlink -f "$1")"

destDir="$(readlink -f "$2")"

maxPostsPerPage="5"

[[ -e "$destDir" ]] && rm -r "$destDir"

rsync -a --checksum "$sourceDir/" "$destDir"

cd "$destDir" || die

blogTitle="$(sed '1q;d' futuramerlin-web-toolkit-blog.conf)"
breadcrumbPrefix="$(sed '2q;d' futuramerlin-web-toolkit-blog.conf)"
breadcrumbHomeName="$(sed '3q;d' futuramerlin-web-toolkit-blog.conf)"
# e.g. <span><a href="/ancillary/ready-to-use.htm">Software</a></span> <span><a href="/ancillary/wreathe">Wreathe</a></span>

# Count the number of posts

numPosts="$(find "$destDir" -type f -name "*.htm" -printf '.' | wc -c)"

numPages=$(( numPosts / maxPostsPerPage ))
if [[ "$numPosts" -gt $(( numPages * maxPostsPerPage )) ]]; then
    numPages=$(( numPages + 1 ))
fi

makeIndexPage() {
    # Create index page
    local indexPageName="page-$currentPageNumber.htm"
    pageSuffix=": Page $currentPageNumber"
    if [[ "$currentPageNumber" == "1" ]]; then
        indexPageName="index.htm"
        pageSuffix=""
    fi
    printf '%s\n\n' '<h1>'"$blogTitle$pageSuffix"'</h1>' > "$indexPageName"

    # Index page breadcrumbs
    {
        [[ -z "$breadcrumbHomeName" ]] && breadcrumbHomeName="Home"
        echo '<p class="breadcrumbs">Page location:'
        if [[ -n "$breadcrumbPrefix" ]]; then
            echo "$breadcrumbPrefix"
        else
            if [[ "$currentPageNumber" == "1" ]]; then
                echo '    <span><a href="..">'"$breadcrumbHomeName"'</a></span>'
            fi
        fi
        if [[ "$currentPageNumber" != "1" ]]; then
            echo '    <span><a href=".">'"$blogTitle"'</a></span>'
        fi
        echo '</p>'$'\n'
    } >> "$indexPageName"

    # Loop over the posts that will go on this page and process them
    local loopPostNumber="1"
    while [[ "$loopPostNumber" -le "$maxPostsPerPage" ]] && [[ "$currentPostNumber" -le "$numPosts" ]]; do
        local previousPostPath="$currentPostPath"
        local previousPostFilename
        previousPostFilename="$(basename "$previousPostPath")"
        local previousPostDay
        previousPostDay="$(dirname "$previousPostPath")"
        local previousPostMonth
        previousPostMonth="$(dirname "$previousPostDay")"
        previousPostDay="$(basename "$previousPostDay")"
        local previousPostYear
        previousPostYear="$(basename "$(dirname "$previousPostMonth")")"
        previousPostMonth="$(basename "$previousPostMonth")"
        local previousPostTitle="$currentPostTitle"

        # Find the first unprocessed file
        currentPostPath="$(find "$destDir" -type f -name "*.htm" -not -path "$destDir/index.htm" -not -path "$destDir/page-*.htm" -print0 | sort -z -r | sed -z -n "$currentPostNumber"p)"
        echo "$currentPostPath"
        currentPostTitle="$(head -n 1 "$currentPostPath")"
        currentPostTitle="${currentPostTitle/<h1>/}"
        currentPostTitle="${currentPostTitle%<\/h1>}"
        ereplace "</h1>" " — $blogTitle</h1>" "$currentPostPath"
        local currentPostFilename
        currentPostFilename="$(basename "$currentPostPath")"
        local currentPostDay
        currentPostDay="$(dirname "$currentPostPath")"
        local currentPostMonth
        currentPostMonth="$(dirname "$currentPostDay")"
        currentPostDay="$(basename "$currentPostDay")"
        local currentPostYear
        currentPostYear="$(basename "$(dirname "$currentPostMonth")")"
        currentPostMonth="$(basename "$currentPostMonth")"

        local currentPostFirstLine
        currentPostFirstLine="$(head -n 1 "$currentPostPath")"
        local currentPostBody
        currentPostBody="$(tail -n +2 "$currentPostPath")"
        # Post page breadcrumbs
        {
            echo "$currentPostFirstLine"
            echo
            echo '<p class="breadcrumbs">Page location:'
            [[ -n "$breadcrumbPrefix" ]] && echo "$breadcrumbPrefix"
            echo '    <span><a href="../../..">'"$blogTitle"'</a></span>'
            if [[ "$currentPageNumber" != "1" ]]; then
                echo '    <span><a href="../../../page-'"$currentPageNumber"'.htm">Page '"$currentPageNumber"'</a></span>'
            fi
            echo '</p>'
            echo "$currentPostBody"
        } > "$currentPostPath"

        if [[ "$numPosts" != "1" ]]; then
            # Create footer navigation widget for the individual post
            # The next and previous are mixed up in this code because the indexes are built in reverse order by date

            printf '\n%s\n' '<footer class="nav-links">' >> "$currentPostPath"

            if [[ "$currentPostNumber" != "$numPosts" ]]; then
                local nextPostNumber=$(( currentPostNumber + 1 ))
                local nextPostPath
                nextPostPath="$(find "$destDir" -type f -name "*.htm" -not -path "$destDir/index.htm" -not -path "$destDir/page-*.htm" -print0 | sort -z -r | sed -z -n "$nextPostNumber"p)"
                local nextPostFilename
                nextPostFilename="$(basename "$nextPostPath")"
                local nextPostDay
                nextPostDay="$(dirname "$nextPostPath")"
                local nextPostMonth
                nextPostMonth="$(dirname "$nextPostDay")"
                nextPostDay="$(basename "$nextPostDay")"
                local nextPostYear
                nextPostYear="$(basename "$(dirname "$nextPostMonth")")"
                nextPostMonth="$(basename "$nextPostMonth")"
                local nextPostTitle
                nextPostTitle="$(head -n 1 "$nextPostPath")"
                nextPostTitle="${nextPostTitle/<h1>/}"
                nextPostTitle="${nextPostTitle%<\/h1>}"
                {
                    echo '    <div class="nav-previous">'
                    echo '        <a href="../../../'"$nextPostYear/$nextPostMonth/$nextPostDay/$nextPostFilename"'" rel="prev"><span class="meta-nav">&larr; Previous post: </span>'"$nextPostTitle"'</a>'
                    echo '    </div>'
                } >> "$currentPostPath"
            fi

            if [[ "$currentPostNumber" != "1" ]]; then
                {
                    echo '    <div class="nav-next">'
                    echo '        <a href="../../../'"$previousPostYear/$previousPostMonth/$previousPostDay/$previousPostFilename"'" rel="next"><span class="meta-nav">Next post: </span>'"$previousPostTitle"'<span class="meta-nav"> &rarr;</span></a>'
                    echo '    </div>'
                } >> "$currentPostPath"
            fi

            echo '</footer>' >> "$currentPostPath"
        fi
        
        # Add the post to the index page
        postIndexLineSuffix=$'\n'
        if [[ "$loopPostNumber" == "$maxPostsPerPage" ]] && [[ "$numPosts" -le "$maxPostsPerPage" ]]; then
            postIndexLineSuffix=""
        fi
        echo '<p class="entry-title"><span class="post-index-date">['"$currentPostYear"m"$currentPostMonth"d"$currentPostDay"'] </span><a href="'"$currentPostYear/$currentPostMonth/$currentPostDay/$currentPostFilename"'">'"$currentPostTitle"'</a></p>'"$postIndexLineSuffix" >> "$indexPageName"

        currentPostNumber=$(( currentPostNumber + 1 ))
        loopPostNumber=$(( loopPostNumber + 1 ))
    done

    # Pagination widget
    if [[ "$numPosts" -gt "$maxPostsPerPage" ]]; then
        {
            # Make index pagination widget, because there are more than one page
            echo '<footer class="pagination">'
            echo '    <ul>'
            getPageFromPageNumber() {
                if [[ "$1" == "1" ]]; then
                    printf "."
                else
                    printf "page-$1.htm"
                fi
            }
            if [[ "$currentPageNumber" != "1" ]] && [[ "$currentPageNumber" != "2" ]]; then
                echo '        <li><a class="first page-numbers" href=".">↞ First (p. 1)</a></li>'
            fi
            if [[ "$currentPageNumber" != "1" ]]; then
                local previousPagePath
                if [[ "$currentPageNumber" == "2" ]]; then
                    previousPagePath="."
                else
                    previousPagePath="page-"$(( currentPageNumber - 1 ))".htm"
                fi
                echo '        <li><a class="prev page-numbers" href="'"$previousPagePath"'">&laquo; Previous (p. '$(( currentPageNumber - 1 ))')</a></li>'
            fi
            echo '        <li><span class="page-numbers current">'"$currentPageNumber"'</span></li>'
            if [[ "$numPostsRemaining" -gt "$maxPostsPerPage" ]]; then
                echo '        <li><a class="next page-numbers" href="page-'$(( currentPageNumber + 1 ))'.htm">Next (p. '$(( currentPageNumber + 1 ))') &raquo;</a></li>'
            fi
            if [[ "$numPostsRemaining" -gt $(( maxPostsPerPage * 2 )) ]]; then
                echo '        <li><a class="last page-numbers" href="page-'"$numPages"'.htm">Last (p. '"$numPages"') ↠</a></li>'
            fi
            echo '        <li>'
            echo '            <form class="wpsp-page-nav-form" action="./" method="get">'
            echo '                <input class="wpsp-input-number" type="text" placeholder="Jump to" size="6" name="paged" />'
            echo '                <input class="wpsp-button" value="Go" type="submit" >'
            echo '            </form>'
            echo '        </li>'
            echo '    </ul>'
            echo '</footer>'
        } >> "$indexPageName"
    fi
}

numPostsRemaining="$numPosts"
currentPageNumber="1"
currentPostNumber="1"
currentPostPath=""
while [[ "$numPostsRemaining" -gt "$maxPostsPerPage" ]]; do
    makeIndexPage
    numPostsRemaining=$(( numPostsRemaining - 5 ))
    currentPageNumber=$(( currentPageNumber + 1 ))
done
# Last (or only) page
makeIndexPage

rm "futuramerlin-web-toolkit-blog.conf"
echo "built" > "futuramerlin-web-toolkit-blog.built"
