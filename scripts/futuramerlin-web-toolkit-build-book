#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

# RTF has too big files when images are included, so is not created
# ODT is used as the source for the other LibreOffice conversions, so should always be included
targets=(htm plain.html tex odt pdf epub plain markdown)
nativeTargets=(htm plain.html tex)
nativeHTMTargets=(htm plain.html)
pandocTargets=(pandoc.json plain markdown)
libreofficeTargets=(odt pdf epub rtf)
targetCount="${#targets[@]}"

nativeTargetsOnly="false"
if [[ "--native-targets-only" == "$1" ]]; then
    nativeTargetsOnly="true"
    shift
fi

bookConf="fmwtk-book.conf"
if [[ -n "$1" ]]; then
    bookConfPath="$1"
    shift
else
    bookConfPath="$bookConf"
fi
bookConfPath="$(realpath "$bookConfPath")"
bookConf="$(basename "$bookConfPath")"

cd "$(dirname "$bookConfPath")" || die "cd failed"

if [[ "$bookConf" != "${bookConf/-fmwtk-book.conf}" ]]; then
    bookName="${bookConf/-fmwtk-book.conf}"
else
    bookName="${bookConf/.fmwtk-book.conf}"
fi

rm -rf "$bookName.fmwtk-book"
mkdir "$bookName.fmwtk-book"

adjustHeadings() {
    local adjustedDepth
    adjustedDepth="$1"
    local fileName
    fileName="$2"
    perl -0777 -p -i -e '
        s/<h6/<h'"$((7 + $adjustedDepth))"'/g;
        s/<h5/<h'"$((6 + $adjustedDepth))"'/g;
        s/<h4/<h'"$((5 + $adjustedDepth))"'/g;
        s/<h3/<h'"$((4 + $adjustedDepth))"'/g;
        s/<h2/<h'"$((3 + $adjustedDepth))"'/g;
        s/<\/h6>/<\/h'"$((7 + $adjustedDepth))"'>/g;
        s/<\/h5>/<\/h'"$((6 + $adjustedDepth))"'>/g;
        s/<\/h4>/<\/h'"$((5 + $adjustedDepth))"'>/g;
        s/<\/h3>/<\/h'"$((4 + $adjustedDepth))"'>/g;
        s/<\/h2>/<\/h'"$((3 + $adjustedDepth))"'>/g;
        ' "$fileName" || die "Substitution failed"
}

adjustAssets() {
    local inputFilePath
    inputFilePath="$(realpath "$1")"
    local outFileDir
    outFileDir="$(dirname "$2")"
    local fileName
    fileName="$3"
    local rootPath
    rootPath="$4"
    local inputFileDir
    inputFileDir="$(dirname "$inputFilePath")"
    local currentItem
    local assetName
    if grep -a -o -e '<img src="[^"]*"' "$fileName" > /dev/null; then
        grep -a -o -e '<img src="[^"]*"' "$fileName" | while IFS= read -r currentItem; do
            assetName="${currentItem%\"}"
            assetName="${assetName/<img src=\"}"
            assetNameEscaped="${assetName//\//\\\/}"
            assetPath="$(realpath "$inputFileDir/$assetName")"
            assetRelativePath="${assetPath/$rootPath}"
            assetExtension="${assetRelativePath//*.}"
            assetHash="$(sha512sum <<< "$assetRelativePath" | awk '{print $1;}')"
            cp "$assetPath" "$outFileDir/assets/$assetHash.$assetExtension" || warn "Could not copy asset sought at $assetPath."
            perl -0777 -p -i -e '
                s/<img src="'"$assetNameEscaped"'"/<img src="'"assets\/$assetHash.$assetExtension"'"/g;
                ' "$fileName" || die "Substitution failed"
        done
    fi
}

convertBookFile() (
    depthOffset="$1"
    bookConf="$(realpath "$2")"
    target="$3"
    out="$(realpath "$4")"
    rootPath="$(realpath "$5")"
    outputDir="$(realpath "$6")"
    bookName="$7"
    cd "$(dirname "$bookConf")" || die "cd failed"
    # Make the assets directory
    mkdir -p "$outputDir/assets"
    # Make sure the file is readable, since the loop failing apparently won't be trapped
    cat "$bookConf" > /dev/null || die "Could not read bookConf file $bookConf in $(pwd)"
    bookTitle="$bookName"
    if [[ "plain.html" == "$target" ]]; then
        firstPageLine="$(head -n 1 "$bookConf")"
        firstPageLine="$(normalizeWhitespace "$firstPageLine")"
        firstPageLineDepth="${firstPageLine/ *}"
        if [[ "-4" == "$firstPageLineDepth" ]]; then
            bookTitle="${firstPageLine#* }"
        else
            warn "Book title not manually set for $bookConf; using default. To set a book title, make the first line of your book configuration file the desired title, with depth -4 "'(e.g. "-4 Your Title").'
        fi
        # Don't include the HTML header if this is a sub-book
        [[ "0" == "$depthOffset" ]] && echo '<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <link href="/simple.css" rel="stylesheet" type="text/css"> <meta content="Ember" name="author"> <meta content="width=device-width,height=device-height,user-scalable=yes" name="viewport"> <title>'"$bookTitle"'</title> </head> <body> <main>' >> "$out"
    fi
    while IFS= read -r currentPageLine; do
        currentPageLine="$(normalizeWhitespace "$currentPageLine")"
        [[ -z "$currentPageLine" ]] && continue
        depth="${currentPageLine/ *}"
        in="${currentPageLine#* }"
        pageDir="$(dirname "$in")"
        [[ "." == "$pageDir" ]] && pageDir=""
        adjustedDepth="$depth"
        if [[ "$depth" == "#" ]]; then
            # Comment
            continue
        fi
        [[ $depth -ge -1 ]] && adjustedDepth=$(( depth + depthOffset ))
        echo "Processing page $in at depth $adjustedDepth"
        if [[ "$depth" == "-2" ]]; then
            [[ -e "$in.$target" ]] && cat "$in.$target" >> "$out"
        elif [[ "$depth" == "-3" ]]; then
            tempFile="$(tempFile)"
            echo "$in" >> "$tempFile"
            headingAdjustment=$(( depthOffset - 1 ))
            adjustHeadings "$headingAdjustment" "$tempFile"
            cat "$tempFile" >> "$out"
        elif [[ "$depth" == "-4" ]]; then
            # Book title
            bookTitleDepthOffset=$(( depthOffset + 1 ))
            echo "<h$bookTitleDepthOffset>$bookTitle</h$bookTitleDepthOffset>" >> "$out"
        else
            includeSubBook="false"
            if [[ -z "${in/*\/}" ]]; then
                in="$in/index"
                # If the page was "/" without any preceding path, fix it up so it's not misinterpreted as an absolute path
                [[ "//index" == "$in" ]] && in=".$in"
                # Likewise for an empty string
                [[ "/index" == "$in" ]] && in=".$in"
            else
                if [[ -f "$in.fmwtk-book.conf" ]] || { [[ -f "$in" ]] && [[ ! -f "$in.htm" ]] && [[ ! -f "$in.ftm" ]]; }; then
                    includeSubBook="true"
                fi
            fi
            if [[ "true" == "$includeSubBook" ]]; then
                [[ -f "$in.fmwtk-book.conf" ]] && in="$in.fmwtk-book.conf"
                convertBookFile $(( adjustedDepth + 1)) "$in" "$target" "$out" "$rootPath" "$outputDir"
                if [[ "$in" != "${in/-fmwtk-book.conf}" ]]; then
                    inputSubbookBaseName="${in/-fmwtk-book.conf}"
                else
                    inputSubbookBaseName="${in/.fmwtk-book.conf}"
                fi
                [[ -d "$inputSubbookBaseName.fmwtk-book/assets" ]] && find "$inputSubbookBaseName.fmwtk-book/assets/" -type f -exec mv {} "$outputDir/assets/" \;
            else
                isFtmPage="false"
                if [[ -f "$in.ftm" ]]; then
                    in="$in.ftm"
                    isFtmPage="true"
                else
                    in="$in.htm"
                fi
                htmlHeadingDepth=$((adjustedDepth + 2)) # h2 is the "0" depth
                tempFile="$(tempFile)"
                if [[ "true" == "$isFtmPage" ]]; then
                    fmwtk-convpage "$in" "$tempFile"
                else
                    cp "$in" "$tempFile"
                fi
                if [[ "-1" != "$depth" ]]; then
                    # Extract the title. Based on futuramerlin-web- toolkit-build-page. Don't do this for pages with depth -1, since it will probably be being used as the main page of a book which will probably come with its own title.
                    perl -ni -e 'print, exit if s/(<h1>(((?!<\/h1>)[\S\s])*)<\/h1>)/\1/sg' "$tempFile"
                    perl -0777 -p -i -e 's/^\s*//;s/\s*$//;' "$tempFile"
                    ereplaceRegEx '<h1>(((?!<\/h1>)[\S\s])*)<\/h1>' '\1' "$tempFile"
                    ereplaceRegEx '(?i)<[^>]*>' ' ' "$tempFile"
                    ereplaceRegEx '\s+' ' ' "$tempFile"
                    ereplaceRegEx '^\s+' '' "$tempFile"
                    ereplaceRegEx '\s+$' '' "$tempFile"
                    # Got the title
                    title="$(cat "$tempFile")"
                    echo "<h$htmlHeadingDepth>$title</h$htmlHeadingDepth>" >> "$out"
                fi
                cp "$in" "$tempFile"
                pageDirEscaped="${pageDir//\//\\\/}"
                removeBreadcrumbs="false"
                if grep -a -o -e '<p class="breadcrumbs">' "$tempFile" > /dev/null; then
                    # Replace first </p> tag with \0, which will be used as a delimiter to remove the breadcrumbs.
                    perl -0777 -p -i -e '
                        s/<\/p>/\0/;
                        ' "$tempFile"
                    removeBreadcrumbs="true"
                fi
                if [[ "-1" == "$depth" ]] || [[ "false" == "$removeBreadcrumbs" ]]; then
                    # If the depth is -1, or no breadcrumbs were found, remove top-level heading
                    ereplaceRegEx '<h1>(((?!<\/h1>)[\S\s])*)<\/h1>' '' "$tempFile"
                fi
                adjustHeadings "$adjustedDepth" "$tempFile"
                adjustAssets "$in" "$out" "$tempFile" "$rootPath"
                perl -0777 -p -i -e '
                    s/<a href="([^\/][^"]*)"/<a href="http:\/\/futuramerlin.com\/'"$pageDirEscaped"'\/\1"/g; # Fix relative in-site URLs
                    s/<a href="\/([^"]*)"/<a href="http:\/\/futuramerlin.com\/\1"/g; # Fix absolute in-site URLs
                    s/<a href="https?:\/\/futuramerlin.com\/'"$pageDirEscaped"'\/(\w+:\/\/[^"]+)"/<a href="\1"/g; # Clean up erroneous cases of previous two lines
                    s/<a href="(https?:\/\/futuramerlin.com\/)\/+([^"]+)"/<a href="\1\2"/g; # Clean up multiple slashes at start of URL (bug in previous three lines)
                    s/<a href="([^"]*)">(((?!<\/a>)[\S\s])*)<\/a>/<a href="\1">\[\1\]: \2<\/a>/g; # Add link destination to link text
                    s/<a href="([^"]*)">(((?!<\/a>)[\S\s])*)\]: (\w+:\/\/)/<a href="\1">\4/g; # But remove it again if the link text was already a URI
                    # Custom syntaxes:
                    s/<idx>//g; # Index entry
                    s/<\/idx>//g;
                    s/<idx-hidden>([^<]+)<\/idx-hidden>//g; # Hidden index entry
                    s/<web>(((?!<\/web>)[\S\s])*)<\/web>//g; # Content to exclude from book
                    s/<book>//g; # Content to exclude from Web site
                    s/<\/book>//g;
                    ' "$tempFile"
                if [[ "true" == "$removeBreadcrumbs" ]]; then
                    # Remove the breadcrumbs (delimited by null)
                    cut -z -d '' -f 2- "$tempFile" >> "$out"
                else
                    cat "$tempFile" >> "$out"
                fi
            fi
        fi
    done < "$bookConf"
    if [[ "plain.html" == "$target" ]]; then
        # Don't include the HTML footer if this is a sub-book
        [[ "0" == "$depthOffset" ]] && echo '</main> </body> </html>' >> "$out"
    fi
    true
)

outputPrefix="$bookName.fmwtk-book/$bookName-book-$(emdate)"
outputDir="$(dirname "$outputPrefix")"
outputBasename="$(basename "$outputPrefix")"
for (( i=0; i<targetCount; i++ )); do
    target="${targets[$i]}"

    echo "Building target format $target for $bookConf..."

    targetExt="$target"
    [[ plain == "$target" ]] && targetExt="txt"
    [[ markdown == "$target" ]] && targetExt="md"
    out="$outputPrefix.$targetExt"

    if contains "$target" "${nativeTargets[@]}"; then
        touch "$out"
        if contains "$target" "${nativeHTMTargets[@]}"; then
            convertBookFile "0" "$bookConf" "$target" "$out" "." "$outputDir"
        fi
        ereplaceRegEx '\0' '' "$out"
    else
        if [[ "false" == "$nativeTargetsOnly" ]]; then
            if contains "$target" "${libreofficeTargets[@]}"; then
                (
                    cd "$outputDir"
                    if [[ "odt" == "$target" ]]; then
                        libreoffice --convert-to "$target" "$outputBasename.plain.html"
                        i=0
                        # LibreOffice exits immediately for some reason, so look for the file
                        while ! [[ -e "$outputBasename.plain.odt" ]]; do
                            i=$((i + 1))
                            if [[ 60 -lt "$i" ]]; then
                                die "Waited 60 seconds for $target output, but it never arrived."
                            fi
                            sleep 1
                        done
                        mv "$outputBasename.plain.odt" "$outputBasename.odt"
                    else
                        libreoffice --convert-to "$target" "$outputBasename.odt"
                        i=0
                        while ! [[ -e "$outputBasename.$target" ]]; do
                            i=$((i + 1))
                            if [[ 60 -lt "$i" ]]; then
                                die "Waited 60 seconds for $target output, but it never arrived."
                            fi
                            sleep 1
                        done
                    fi
                )
            fi
            if contains "$target" "${pandocTargets[@]}"; then
                (
                    cd "$outputDir"
                    if [[ "pandoc.json" == "$target" ]]; then
                        pandoc -r html -t json -o "$outputBasename.$targetExt" "$outputBasename.plain.html"
                    else
                        pandoc -r json -t "$target" -o "$outputBasename.$targetExt" "$outputBasename.pandoc.json"
                    fi
                )
            fi
        fi
    fi

    if [[ -e "$out" ]]; then
        cp "$out" "$bookName.fmwtk-book/$bookName-book.$targetExt"

        echo '<html><head><meta http-equiv="Redirect:'"$out"'"><title></title></head><body></body></html>' > "$bookName.fmwtk-book/$bookName-book.$targetExt.redirect.html"

        echo "Done building target format $target."
    else
        echo "Skipped building target format $target."
    fi
done

echo "Done building book $bookConf."
