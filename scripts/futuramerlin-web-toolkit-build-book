#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

bookConf="fmwtk-book.conf"
if [[ -n "$1" ]]; then
    bookConfPath="$1"
    shift
else
    bookConfPath="$bookConf"
fi
bookConfPath="$(realpath "$bookConfPath")"
bookConf="$(basename "$bookConfPath")"

cd "$(dirname "$bookConf")" || die "cd failed"

bookName="${bookConf/-fmwtk-book.conf}"

rm -rf "$bookName.fmwtk-book"
mkdir "$bookName.fmwtk-book"

targets=(htm plain.html pandoc.json odt rtf pdf epub)
nativeTargets=(htm plain.html)
pandocTargets=(pandoc.json rtf epub)
libreofficeTargets=(odt pdf epub rtf)
targetCount="${#targets[@]}"
outputPrefix="$bookName.fmwtk-book/$bookName-book-$(emdate)"
outputDir="$(dirname "$outputPrefix")"
outputBasename="$(basename "$outputPrefix")"
for (( i=0; i<targetCount; i++ )); do
    target="${targets[$i]}"

    echo "Building target format $target..."

    out="$outputPrefix.$target"
    touch "$out"

    if contains "$target" "${nativeTargets[@]}"; then
        while IFS= read -r currentPageLine; do
            currentPageLine="$(normalizeWhitespace "$currentPageLine")"
            depth="${currentPageLine/ *}"
            in="${currentPageLine#* }"
            pageDir="$(dirname "$in")"
            [[ "." == "$pageDir" ]] && pageDir=""
            echo "Processing page $in at depth $depth"
            if [[ "$depth" == "-1" ]]; then
                [[ -e "$in.$target" ]] && cat "$in.$target" >> "$out"
            elif [[ "$depth" == "-2" ]]; then
                echo "$in" >> "$out"
            else
                if [[ -z "${in/*\/}" ]]; then
                    in="$in/index"
                fi
                in="$in.htm"
                htmlHeadingDepth=$((depth + 2)) # h2 is the "0" depth
                tempFile="$(tempFile)"
                cp "$in" "$tempFile"
                # Extract the title. Based on futuramerlin-web-toolkit-build-page
                perl -ni -e 'print, exit if s/(<h1>(((?!<\/h1>)[\S\s])*)<\/h1>)/\1/sg' "$tempFile"
                perl -0777 -p -i -e 's/^\s*//;s/\s*$//;' "$tempFile"
                ereplaceRegEx '<h1>(((?!<\/h1>)[\S\s])*)<\/h1>' '\1' "$tempFile"
                ereplaceRegEx '(?i)<[^>]*>' ' ' "$tempFile"
                ereplaceRegEx '\s+' ' ' "$tempFile"
                ereplaceRegEx '^\s+' '' "$tempFile"
                ereplaceRegEx '\s+$' '' "$tempFile"
                # Got the title
                title="$(cat "$tempFile")"
                echo "<h$htmlHeadingDepth>$title</h$htmlHeadingDepth>" >> "$out"
                cp "$in" "$tempFile"
                pageDirEscaped="${pageDir//\//\\\/}"
                perl -0777 -p -i -e 's/<\/p>/\0/;
                    s/<h5/<h'"$((6 + $depth))"'/g;
                    s/<h4/<h'"$((5 + $depth))"'/g;
                    s/<h3/<h'"$((4 + $depth))"'/g;
                    s/<h2/<h'"$((3 + $depth))"'/g;
                    s/<\/h5>/<\/h'"$((6 + $depth))"'>/g;
                    s/<\/h4>/<\/h'"$((5 + $depth))"'>/g;
                    s/<\/h3>/<\/h'"$((4 + $depth))"'>/g;
                    s/<\/h2>/<\/h'"$((3 + $depth))"'>/g;
                    s/<a href="([^\/][^"]*)"/<a href="http:\/\/futuramerlin.com\/'"$pageDirEscaped"'\/\1"/g; # Fix relative in-site URLs
                    s/<a href="\/([^"]*)"/<a href="http:\/\/futuramerlin.com\/\1"/g; # Fix absolute in-site URLs
                    s/<a href="https?:\/\/futuramerlin.com\/'"$pageDirEscaped"'\/(\w+:\/\/[^"]+)"/<a href="\1"/g; # Clean up erroneous cases of previous two lines
                    s/<a href="([^"]*)">(((?!<\/a>)[\S\s])*)<\/a>/<a href="\1">\[\1\]: \2<\/a>/g; # Add link destination to link text
                    s/<a href="([^"]*)">(((?!<\/a>)[\S\s])*)\]: (\w+:\/\/)/<a href="\1">\4/g; # But remove it again if the link text was already a URI
                    ' "$tempFile"
                cut -z -d '' -f 2- "$tempFile" >> "$out"
            fi
        done < "$bookConf"
    else
        if contains "$target" "${libreofficeTargets[@]}"; then
            (
                cd "$outputDir"
                if [[ "odt" == "$target" ]]; then
                    libreoffice --convert-to "$target" "$outputBasename.plain.html"
                    i=0
                    # LibreOffice exits immediately for some reason, so look for the file
                    while ! [[ -e "$outputBasename.plain.odt" ]]; do
                        i=$((i + 1))
                        if [[ 60 -lt "$i" ]]; then
                            die "Waited 60 seconds for $target output, but it never arrived."
                        fi
                        sleep 1
                    done
                    mv "$outputBasename.plain.odt" "$outputBasename.odt"
                else
                    libreoffice --convert-to "$target" "$outputBasename.odt"
                    i=0
                    while ! [[ -e "$outputBasename.$target" ]]; do
                        i=$((i + 1))
                        if [[ 60 -lt "$i" ]]; then
                            die "Waited 60 seconds for $target output, but it never arrived."
                        fi
                        sleep 1
                    done
                fi
            )
        fi
        if contains "$target" "${pandocTargets[@]}"; then
            (
                cd "$outputDir"
                if [[ "pandoc.json" == "$target" ]]; then
                    pandoc -r html -t json -o "$outputBasename.$target" "$outputBasename.plain.html"
                else
                    pandoc -r json -t "$target" -o "$outputBasename.$target" "$outputBasename.pandoc.json"
                fi
            )
        fi
    fi

    cp "$out" "$bookName.fmwtk-book/$bookName-book.$target"

    echo '<html><head><meta http-equiv="Redirect:'"$out"'"><title></title></head><body></body></html>' > "$bookName.fmwtk-book/$bookName-book.$target.redirect.html"

    echo "Done building target format $target."
done

echo "Done building book."
