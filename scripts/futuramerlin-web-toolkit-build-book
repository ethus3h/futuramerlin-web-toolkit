#!/usr/bin/env bash
# shellcheck disable=SC1091
source ember_bash_setup &> /dev/null || { printf '%b' '\033[1;31m' >&2; echo "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd): The required dependency ember-shared could not be found (or ember_bash_setup could not be sourced for some other reason)." >&2; printf '%b' '\033[0m' >&2; exit 1; }
#set -x

trap 'die "A fatal error was reported on ${BASH_SOURCE[0]} line ${LINENO} in $(pwd) at $(emdate)."' ERR

bookConf="fmwtk-book.conf"
if [[ -n "$1" ]]; then
    bookConfPath="$1"
    shift
else
    bookConfPath="$bookConf"
fi
bookConfPath="$(realpath "$bookConfPath")"
bookConf="$(basename "$bookConfPath")"

cd "$(dirname "$bookConf")" || die "cd failed"

bookName="${bookConf/-fmwtk-book.conf}"

rm -rf "$bookName.fmwtk-book"
mkdir "$bookName.fmwtk-book"

targets=(htm plain.html)
targetCount="${#targets[@]}"
for (( i=0; i<targetCount; i++ )); do
    target="${targets[$i]}"

    echo "Building target format $target..."

    out="$bookName.fmwtk-book/$bookName-book-$(emdate).$target"
    touch "$out"

    while IFS= read -r currentPageLine; do
        depth="${currentPageLine/ *}"
        in="${currentPageLine#* }"
        echo "Processed page $in at depth $depth"
        if [[ "$depth" == "-1" ]]; then
            [[ -e "$in.$target" ]] && cat "$in.$target" >> "$out"
        elif [[ "$depth" == "-2" ]]; then
            echo "$in" >> "$out"
        else
            in="$in.htm"
            htmlHeadingDepth=$((depth + 1))
            tempFile="$(tempFile)"
            cp "$in" "$tempFile"
            # Extract the title. Based on futuramerlin-web-toolkit-build-page
            perl -ni -e 'print, exit if s/(<h1>(((?!<\/h1>)[\S\s])*)<\/h1>)/\1/sg' "$tempFile"
            perl -0777 -p -i -e 's/^\s*//;s/\s*$//;' "$tempFile"
            ereplaceRegEx '<h1>(((?!<\/h1>)[\S\s])*)<\/h1>' '\1' "$tempFile"
            ereplaceRegEx '(?i)<[^>]*>' ' ' "$tempFile"
            ereplaceRegEx '\s+' ' ' "$tempFile"
            ereplaceRegEx '^\s+' '' "$tempFile"
            ereplaceRegEx '\s+$' '' "$tempFile"
            # Got the title
            title="$(cat "$tempFile")"
            echo "<h$htmlHeadingDepth>$title</h$htmlHeadingDepth>" >> "$out"
            cp "$in" "$tempFile"
            perl -0777 -p -i -e 's/<\/p>/\0/;' "$tempFile"
            perl -0777 -p -i -e 's/<h5>/<h'"$((5 + $depth))"'>/;' "$tempFile"
            perl -0777 -p -i -e 's/<h4>/<h'"$((4 + $depth))"'>/;' "$tempFile"
            perl -0777 -p -i -e 's/<h3>/<h'"$((3 + $depth))"'>/;' "$tempFile"
            perl -0777 -p -i -e 's/<h2>/<h'"$((2 + $depth))"'>/g;' "$tempFile"
            perl -0777 -p -i -e 's/<\/h5>/<\/h'"$((5 + $depth))"'>/;' "$tempFile"
            perl -0777 -p -i -e 's/<\/h4>/<\/h'"$((4 + $depth))"'>/;' "$tempFile"
            perl -0777 -p -i -e 's/<\/h3>/<\/h'"$((3 + $depth))"'>/;' "$tempFile"
            perl -0777 -p -i -e 's/<\/h2>/<\/h'"$((2 + $depth))"'>/g;' "$tempFile"
            cut -z -d '' -f 2- "$tempFile" >> "$out"
        fi
    done < "$bookConf"

    cp "$out" "$bookName.fmwtk-book/$bookName-book.$target"

    echo "Done building target format $target."
done

echo "Done building book."
